(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7882],{25675:(e,t,a)=>{Promise.resolve().then(a.bind(a,27540))},27540:(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>m});var n=a(95155),s=a(12115),r=a(27841),i=a(62523),l=a(30285),o=a(6723),c=a(35695),u=a(89578);function m(){let[e,t]=(0,s.useState)(1),[a,m]=(0,s.useState)(""),[d,p]=(0,s.useState)(!1),[h,g]=(0,s.useState)(null),f=(0,c.useRouter)(),v=async()=>{if(a){p(!0);try{let e='\n        You are an expert nutritionist and chef for a meal delivery service.\n        Your task is to analyze a meal based on its name to estimate its ingredients and calculate its nutritional profile.\n\n        The user will provide a meal name: "'.concat(a,'".\n\n        Follow these steps:\n        1.  **Estimate Ingredients**: Based on the meal name, create a realistic list of common ingredients and their estimated quantities in grams for a single serving.\n        2.  **Calculate Nutrition**: For each ingredient, estimate its nutritional values (calories, protein, carbs, fat, fibers). Then, sum them up to get the total nutritional profile for the entire meal.\n        3.  **Generate Description**: Write a short, appealing marketing description for the meal, highlighting its key features (e.g., "healthy", "protein-rich", "delicious").\n        4.  **Format Output**: Return ONLY the data in the specified JSON format, without any markdown, backticks or "json" specifier.\n\n        The JSON output should have this structure:\n        {\n          "mealName": "string",\n          "description": "string",\n          "ingredients": [{ "name": "string", "grams": "number" }],\n          "totalMacros": { "calories": "number", "protein": "number", "carbs": "number", "fat": "number", "fibers": "number" }\n        }\n\n        Now, analyze the following meal: "').concat(a,'"\n      '),n=await fetch("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=".concat("AIzaSyDOdasyt5PlkK-Dfa4Ig-ajBvDG9qzcvbo"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:[{parts:[{text:e}]}]})});if(!n.ok)throw console.error("API response:",await n.text()),Error("Erreur d'analyse IA");let s=(await n.json()).candidates[0].content.parts[0].text.replace(/```json/g,"").replace(/```/g,"").trim(),r=JSON.parse(s);g(r),t(2)}catch(e){alert(e.message||"L'IA n'a pas pu g\xe9n\xe9rer le plat."),console.error(e)}finally{p(!1)}}};return(0,n.jsx)("div",{children:(0,n.jsxs)("div",{className:"max-w-xl mx-auto p-6",children:[1===e&&(0,n.jsxs)("div",{className:"space-y-6",children:[(0,n.jsxs)(l.$,{variant:"outline",onClick:()=>f.push("/caterer"),className:"flex items-center gap-2",children:[(0,n.jsx)(u.A,{className:"w-4 h-4"}),"Retour"]}),(0,n.jsx)("h2",{children:"Ajouter un nouveau repas"}),(0,n.jsx)("h4",{className:"text-2xl font-bold mb-4",children:"Etape 1 : Ajouter un plat avec L'IA"}),(0,n.jsx)("p",{children:"Saissiez le nom d'un plat pour l'analysez avec l'IA ( \"ex: \"Couscous au poulet\") Notre IA estimera les ingr\xe9dients et les valeurs nutritionnelles pour vous ."}),(0,n.jsx)(i.p,{value:a,onChange:e=>m(e.target.value),placeholder:"Nom du plat",disabled:d,className:"mb-4"}),(0,n.jsxs)(l.$,{onClick:v,disabled:!a||d,className:"w-full bg-primary",children:[d?(0,n.jsx)(o.A,{className:"mr-2 animate-spin"}):null,"G\xe9n\xe9rer avec l'IA"]})]}),2===e&&h&&(0,n.jsx)(r.default,{initialAnalysis:h})]})})}}},e=>{var t=t=>e(e.s=t);e.O(0,[310,1951,4595,8561,6766,9247,4734,6482,5637,3699,322,7841,8441,1684,7358],()=>t(25675)),_N_E=e.O()}]);
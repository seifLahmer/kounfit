
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId));
    }
    
    match /users/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow write: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    match /caterers/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow write: if isAdmin(request.auth.uid);
      allow create: if isAdmin(request.auth.uid);
    }

    match /admins/{userId} {
      allow read, write: if isAdmin(request.auth.uid);
      allow create: if isAdmin(request.auth.uid);
    }
    
    match /meals/{mealId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.createdBy;
      allow update, delete: if request.auth.uid == resource.data.createdBy || isAdmin(request.auth.uid);
    }

    match /orders/{orderId} {
      allow read: if request.auth.uid == resource.data.clientId || request.auth.uid in resource.data.catererIds || isAdmin(request.auth.uid);
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow update: if request.auth.uid in resource.data.catererIds || isAdmin(request.auth.uid);
    }
    
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      // Notifications are created server-side (or via trusted client actions like placing an order), so no direct create rule.
    }
  }
}

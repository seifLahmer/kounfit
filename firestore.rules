
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to get a user's role from their profile document
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    // Helper function to check if a user is an admin by checking the 'admins' collection
    function isAdmin() {
      return exists(/databases/$(database)/documents/admin/$(request.auth.uid));
    }

    // USERS Collection
    // Users can create their own profile, and can only read/update their own data.
    match /users/{userId} {
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated();
    }

    // CATERERS Collection
    // Only admins can create, update or delete caterers.
    // Any authenticated user can read the list of caterers (e.g., to display names).
    match /caterers/{catererId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // ADMIN Collection
    // Only readable by other admins to prevent listing all admins.
    match /admin/{adminId} {
        allow read, write: if isAdmin();
    }

    // MEALS Collection
    // Any authenticated user can read meals.
    // Caterers can create meals and can only update/delete their own.
    match /meals/{mealId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && getRole(request.auth.uid) == 'caterer';
      allow update, delete: if isAuthenticated() && resource.data.createdBy == request.auth.uid;
    }

    // ORDERS Collection
    // Clients can create their own orders.
    // Clients can read their own orders.
    // Caterers can read orders assigned to them.
    // Admins can read all orders.
    // Caterers can update the status of an order.
    match /orders/{orderId} {
      allow create: if isAuthenticated() && request.resource.data.clientId == request.auth.uid;
      allow read: if isAuthenticated() && (
                    resource.data.clientId == request.auth.uid || 
                    request.auth.uid in resource.data.catererIds ||
                    isAdmin()
                  );
      allow update: if isAuthenticated() && (request.auth.uid in resource.data.catererIds);
    }
    
    // NOTIFICATIONS Collection
    // Only the assigned user can read their notifications.
    // Notifications are created by a trusted server process (our backend services), so writes are locked down.
    match /notifications/{notificationId} {
        allow read, update: if isAuthenticated() && resource.data.userId == request.auth.uid;
        allow create: if false; // Should be created by server/admin logic, not clients
    }
  }
}

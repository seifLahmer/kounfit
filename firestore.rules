rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isClient() {
      return isSignedIn() && exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function isApprovedCaterer() {
      let catererDoc = get(/databases/$(database)/documents/caterers/$(request.auth.uid));
      return isSignedIn() && catererDoc.data.status == 'approved';
    }

    function isApprovedDeliveryPerson() {
      let deliveryDoc = get(/databases/$(database)/documents/deliveryPeople/$(request.auth.uid));
      return isSignedIn() && deliveryDoc.data.status == 'approved';
    }

    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // USERS collection (Clients)
    match /users/{userId} {
      // A user can read/write their own profile
      allow read, write: if request.auth.uid == userId;
      // Admins can read user profiles
      allow get: if isAdmin();
      // Allow creation for new users
      allow create: if isSignedIn();
    }
    
    // CATERERS collection
    match /caterers/{catererId} {
      // Caterers can read/write their own profile
      allow read, write: if request.auth.uid == catererId;
      // Admins can read and manage all caterers
      allow read, write: if isAdmin();
      // Allow creation for new caterers
      allow create: if isSignedIn();
    }
    
    // DELIVERY PEOPLE collection
    match /deliveryPeople/{deliveryId} {
      // Delivery people can read/write their own profile
      allow read, write: if request.auth.uid == deliveryId;
      // Admins can read and manage all delivery people
      allow read, write: if isAdmin();
       // Allow creation for new delivery people
      allow create: if isSignedIn();
    }

    // ADMINS collection
    match /admins/{adminId} {
        // Only other admins can manage admins
      allow read, write: if isAdmin();
    }

    // MEALS collection
    match /meals/{mealId} {
        // Clients can read meals, Caterers can read meals (needed for order details), Admins can read meals
      allow get: if isClient() || isApprovedCaterer() || isAdmin();
      // Only approved caterers can create, update, or delete meals they own
      allow create: if isApprovedCaterer() && request.resource.data.createdBy == request.auth.uid;
      allow update, delete: if isApprovedCaterer() && resource.data.createdBy == request.auth.uid;
      // Clients can read lists of meals
      allow list: if isClient() || isApprovedCaterer() || isAdmin();
      
      // Ratings subcollection
      match /userRatings/{userId} {
        // A client can only rate a meal once (create/write their own rating doc)
        allow write: if isClient() && request.auth.uid == userId;
        // All signed-in users can read ratings
        allow read: if isSignedIn();
      }
    }
    
    // ORDERS collection
    match /orders/{orderId} {
      // A client can read their own orders
      allow get: if isClient() && resource.data.clientId == request.auth.uid;
      // A client can create an order for themselves
      allow create: if isClient() && request.resource.data.clientId == request.auth.uid;
      
      // A caterer can read/update an order if they are one of the caterers for that order
      allow read, update: if isApprovedCaterer() && request.auth.uid in resource.data.catererIds;

      // A delivery person can read orders in their region that are ready for delivery,
      // and can update the status of an order they are delivering.
      allow read, update: if isApprovedDeliveryPerson() && get(/databases/$(database)/documents/deliveryPeople/$(request.auth.uid)).data.region == resource.data.clientRegion;

      // Admins can read/write all orders
      allow read, write: if isAdmin();
      // Allow listing for caterers, delivery people, and admins
      allow list: if isApprovedCaterer() || isApprovedDeliveryPerson() || isAdmin();
    }
    
    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
      // A user can read/update their own notifications
      allow read, update: if isSignedIn() && resource.data.userId == request.auth.uid;
      // System can create notifications (deny client-side creation)
      allow create: if request.auth == null; // Example: For server-side creation only
    }
  }
}

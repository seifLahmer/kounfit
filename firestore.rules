
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isCaterer() {
       return get(/databases/$(database)/documents/caterers/$(request.auth.uid)).data.role == 'caterer';
    }

    match /admins/{userId} {
      allow get: if request.auth.uid != null;
      // Allow creation if the user is an admin, or if a new user is creating their own record (self-heal on login)
      allow create: if isAdmin() || request.auth.uid == userId;
      allow read, write: if isAdmin();
    }

    match /caterers/{catererId} {
       // Allow admins to create, read, update, and delete caterers.
      allow read, write: if isAdmin();
    }

    match /users/{userId} {
      // A user can read/update their own profile
      allow read, update: if request.auth.uid == userId;
      // A user can create their own profile document
      allow create: if request.auth.uid == userId;
    }

    match /meals/{mealId} {
      // Any authenticated user can read meals
      allow read: if request.auth.uid != null;
      // Only caterers can manage their meals
      allow create, update, delete: if isCaterer();
    }

    match /orders/{orderId} {
       // The client who owns the order can create and read it
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow read: if request.auth.uid == request.resource.data.clientId || isAdmin();
      // The caterer assigned to the order can update it
      allow update: if isCaterer() || isAdmin();
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for role
    function isRole(role) {
      return exists(/databases/$(database)/documents/$(role)s/$(request.auth.uid));
    }
    
    function isClient() {
      return isRole('user');
    }

    function isAdmin() {
      // Note: singular 'admin' as per user request for this specific collection
      return exists(/databases/$(database)/documents/admin/$(request.auth.uid));
    }

    function isCaterer() {
      return isRole('caterer');
    }

    // Users can read/update their own profile, but not others'.
    // A user can create their own document.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }
    
    // Admins have their own collection. Only they can read their own document.
    match /admin/{userId} {
       allow get: if request.auth.uid == userId; // Allow self-check for role
    }
    
    // Caterers have their own collection. Only they can read their own document.
    match /caterers/{userId} {
       allow get: if request.auth.uid == userId; // Allow self-check for role
    }

    // Any authenticated user can read meal data.
    // Only caterers can create, update, or delete their own meals.
    match /meals/{mealId} {
      allow read: if request.auth.uid != null;
      allow create: if isCaterer();
      allow update, delete: if isCaterer() && resource.data.createdBy == request.auth.uid;
    }
    
    // Clients can create their own orders.
    // Caterers can view/update orders that contain their meals.
    // Admins can read all orders.
    match /orders/{orderId} {
      allow read: if isAdmin() || (isCaterer() && request.auth.uid in resource.data.catererIds) || request.auth.uid == resource.data.clientId;
      allow create: if isClient() && request.auth.uid == request.resource.data.clientId;
      allow update: if isCaterer() && request.auth.uid in resource.data.catererIds;
    }
    
    // Notifications can be read by the user they are intended for.
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    function isClient() {
      return isAuth() && getUserRole() == 'client';
    }
    function isCaterer() {
      return isAuth() && getUserRole() == 'caterer';
    }
     function isAdmin() {
      return isAuth() && getUserRole() == 'admin';
    }

    // /users/{uid}
    match /users/{uid} {
      // Users can read their own data, Admins can read any user data
      allow read: if isAuth() && (request.auth.uid == uid || isAdmin());
      // Users can create and update their own profile
      allow write: if isAuth() && request.auth.uid == uid;
    }
    
    // /traiteur/{uid}
    match /traiteur/{uid} {
        allow read, write: if isAdmin();
    }

    // /meals/{mealId}
    match /meals/{mealId} {
      // Any authenticated user can read meals
      allow read: if isAuth();
      // Only caterers can create meals
      allow create: if isCaterer();
      // Only the caterer who created the meal or an admin can update/delete it
      allow update, delete: if isAuth() && (isAdmin() || request.auth.uid == resource.data.createdBy);
    }

    // /orders/{orderId}
    match /orders/{orderId} {
        // Clients can create their own orders
        allow create: if isClient() && request.resource.data.clientId == request.auth.uid;
        // Admins can read all orders
        // Clients can read their own orders
        // Caterers can read orders that include them
        allow read: if isAdmin() || 
                    (isClient() && resource.data.clientId == request.auth.uid) ||
                    (isCaterer() && request.auth.uid in resource.data.catererIds);

        // Caterers can update status, Admins can update anything
        allow update: if (isCaterer() && request.resource.data.status != resource.data.status) || isAdmin();
    }
    
     // /notifications/{notificationId}
    match /notifications/{notificationId} {
        // Users can read their own notifications
        allow read, update: if isAuth() && request.auth.uid == resource.data.userId;
        // The system can create notifications (via backend/service functions)
        allow create: if isAuth();
    }
  }
}

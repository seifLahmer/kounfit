rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to get a user's role from the 'users' collection
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isClient() {
      return isAuthenticated() && getRole(request.auth.uid) == 'client';
    }
    
    function isCaterer() {
      return isAuthenticated() && getRole(request.auth.uid) == 'caterer';
    }
    
    function isAdmin() {
      return isAuthenticated() && getRole(request.auth.uid) == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      allow read, update: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated(); // Any authenticated user can create their own profile
    }

    // Rules for the 'traiteur' (caterers) collection
    match /traiteur/{catererId} {
      allow read, create, update, delete: if isAdmin();
      allow read: if isCaterer() && isOwner(catererId);
    }
    
     // Rules for the 'admin' collection
    match /admin/{adminId} {
      allow read, create, update, delete: if isAdmin() && isOwner(adminId);
    }

    // Rules for the 'meals' collection
    match /meals/{mealId} {
      allow read: if isAuthenticated(); // Any authenticated user can read meals
      allow create: if isCaterer(); // Only caterers can create meals
      allow update, delete: if isCaterer() && resource.data.createdBy == request.auth.uid; // Caterer can only update/delete their own meals
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
      allow create: if isClient(); // Only clients can place orders
      allow read: if (isClient() && resource.data.clientId == request.auth.uid) || 
                    (isCaterer() && request.auth.uid in resource.data.catererIds) ||
                    isAdmin();
      allow update: if (isCaterer() && request.auth.uid in resource.data.catererIds) || isAdmin(); // Caterers can update status, admins can manage
    }
    
    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.userId);
      // Notifications are created by the server/backend functions, so no client `create` rule is needed.
    }
  }
}

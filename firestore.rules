
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check for the admin custom claim on the user's auth token.
      // This is more secure and efficient than reading a document.
      return request.auth != null && request.auth.token.get('admin', false) == true;
    }

    // Rules for the 'users' (clients) collection
    match /users/{userId} {
      allow create: if isOwner(userId);
      allow read, update: if isOwner(userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Rules for the 'caterers' collection
    match /caterers/{catererId} {
      allow create: if isOwner(catererId); // A caterer can create their own profile.
      allow read: if true; // Allow anyone to read caterer profiles (e.g., for listing).
      allow update: if isOwner(catererId) || isAdmin();
      allow delete: if isAdmin();
    }

    // Rules for the 'deliveryPeople' collection
    match /deliveryPeople/{deliveryId} {
      allow create: if isOwner(deliveryId); // A delivery person can create their own profile.
      allow read: if isOwner(deliveryId) || isAdmin(); // Only owner and admin can read details.
      allow update: if isOwner(deliveryId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Rules for the 'admins' collection
    match /admins/{adminId} {
        allow read, write: if isAdmin();
    }

    // Rules for the 'meals' collection
    match /meals/{mealId} {
      // Anyone can read meal details (e.g., clients browsing)
      allow read: if true;
      
      // Only the caterer who created it or an admin can create, update, or delete it
      allow create, update, delete: if request.auth != null && (request.resource.data.createdBy == request.auth.uid || isAdmin());
      
       // Allow anyone authenticated to add a rating
      match /userRatings/{userId} {
        allow read, write: if request.auth != null;
      }
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
        allow create: if request.auth.uid == request.resource.data.clientId;
        allow read, update: if request.auth.uid == resource.data.clientId 
                              || request.auth.uid in resource.data.catererIds 
                              || request.auth.uid == resource.data.deliveryPersonId 
                              || isAdmin();
        allow delete: if isAdmin();
    }
    
    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      allow read, create, update: if request.auth.uid == resource.data.userId;
      allow delete: if isAdmin();
    }
  }
}

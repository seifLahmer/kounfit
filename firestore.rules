
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
      allow list: if isAdmin();
    }

    match /admins/{adminId} {
      allow get: if request.auth.uid == adminId;
      allow list, create, update, delete: if isAdmin();
    }
    
    match /caterers/{catererId} {
      // A caterer can read their own data, an admin can list all caterers
      allow get: if request.auth.uid == catererId || isAdmin();
      allow list, create, update, delete: if isAdmin();
    }

    match /meals/{mealId} {
      // Public can read meals
      allow get: if true;
      allow list: if request.auth != null;
      
      // Caterers can create meals if they are the owner
      // Admins can create meals
      allow create: if request.auth.uid == request.resource.data.createdBy || isAdmin();
      
      // Only the caterer who created it or an admin can update/delete
      allow update, delete: if resource.data.createdBy == request.auth.uid || isAdmin();
    }

    match /orders/{orderId} {
        allow create: if request.auth.uid == request.resource.data.clientId;
        allow read: if request.auth.uid == resource.data.clientId || isAdmin();
        allow list: if isAdmin();
        // Caterers can update status if they are part of the order, or an admin
        allow update: if (resource.data.catererIds.hasAny([request.auth.uid])) || isAdmin();
    }

    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      allow create: if true; // Typically created by trusted server logic
    }
  }
}

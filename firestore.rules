
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // Helper function to check if the requester is an approved delivery person
    function isApprovedDeliveryPerson() {
        return exists(/databases/$(database)/documents/deliveryPeople/$(request.auth.uid)) &&
               get(/databases/$(database)/documents/deliveryPeople/$(request.auth.uid)).data.status == 'approved';
    }

    // USERS: Only signed-in users can access their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == userId;
    }

    // CATERERS: Read is public for role checking, write is restricted.
    match /caterers/{catererId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == catererId;
      allow update: if isAdmin(); // Only admins can approve/reject.
      allow delete: if isAdmin();
    }

    // DELIVERY PEOPLE: Read is public for role checking, write is restricted.
    match /deliveryPeople/{deliveryId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == deliveryId;
      allow update: if isAdmin(); // Only admins can approve/reject.
      allow delete: if isAdmin();
    }
    
    // ADMINS: Only readable for role checking. Creation only by other admins (or manually in console).
    match /admins/{adminId} {
        allow read: if request.auth != null;
        allow write: if false; // Prevent client-side admin creation for security
    }

    // MEALS: Caterers can create/delete their own meals. Clients can read them.
    match /meals/{mealId} {
      allow read: if request.auth != null;
      // Allow create/delete only if the user is the owner (caterer)
      allow create, delete: if request.auth.uid == request.resource.data.createdBy;
      // Allow clients to rate (write to subcollection)
      match /userRatings/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth.uid == userId;
      }
    }
    
    // ORDERS: Clients can create orders. Caterers and Admins can read/update.
    match /orders/{orderId} {
      function isOrderClient() {
        return request.auth.uid == resource.data.clientId;
      }
      function isOrderCaterer() {
        return request.auth.uid in resource.data.catererIds;
      }
      function isAssignedDeliveryPerson() {
        return request.auth.uid == resource.data.deliveryPersonId;
      }
      function canReadAvailableDelivery() {
        let deliveryPersonProfile = get(/databases/$(database)/documents/deliveryPeople/$(request.auth.uid)).data;
        return resource.data.status == 'ready_for_delivery' && resource.data.clientRegion == deliveryPersonProfile.region;
      }

      allow read: if isOrderClient() || isOrderCaterer() || isAdmin() || isAssignedDeliveryPerson() || (isApprovedDeliveryPerson() && canReadAvailableDelivery());
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow update: if isOrderCaterer() || isAdmin() || isApprovedDeliveryPerson();
    }

    // NOTIFICATIONS: Users can only see their own notifications.
    match /notifications/{notificationId} {
      allow read: if request.auth.uid == resource.data.userId;
      // Notifications are created server-side (or by trusted roles like caterers via backend functions)
      allow write: if false;
    }
  }
}

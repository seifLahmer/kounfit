rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read/write their own profile
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Admins can read/write any admin document
    match /admins/{adminId} {
      allow read, write: if get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }

    // Caterers can only manage their own profile
    match /caterers/{catererId} {
      allow read: if request.auth != null; // Allow reading caterer info
      allow create, update, delete: if request.auth != null && request.auth.uid == catererId;
    }

    // Any authenticated user can read meals. Only creators can write them.
    match /meals/{mealId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }
    
    // Ratings can be created/updated by any authenticated user, but only read by the meal creator or admin
    match /meals/{mealId}/userRatings/{userId} {
       allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Orders can be created by clients. Read/Update by client or involved caterer.
    match /orders/{orderId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid in resource.data.catererIds);
    }
    
    // Notifications are private to the user
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}

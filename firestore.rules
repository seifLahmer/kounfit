rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the requesting user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if the user has a specific role
    function hasRole(role) {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Users can read/write their own data. Admins can read anyone's data.
    match /users/{userId} {
      allow read, update: if isOwner(userId) || hasRole('admin');
      allow create: if isSignedIn();
    }
    
    // Admins can manage caterers
    match /traiteur/{catererId} {
        allow read, write: if hasRole('admin');
    }

    // Meals can be read by anyone.
    // Caterers can manage their own meals. Admins can manage any meal.
    match /meals/{mealId} {
      allow read: if true;
      allow create: if hasRole('caterer');
      allow update, delete: if (hasRole('admin')) || (hasRole('caterer') && resource.data.createdBy == request.auth.uid);
    }

    // Orders can be created by clients.
    // Clients can read their own orders.
    // Caterers can read/update orders they are part of.
    // Admins have full access.
    match /orders/{orderId} {
      allow create: if hasRole('client');
      allow read: if hasRole('admin') || (hasRole('client') && resource.data.clientId == request.auth.uid) || (hasRole('caterer') && request.auth.uid in resource.data.catererIds);
      allow update: if hasRole('admin') || (hasRole('caterer') && request.auth.uid in resource.data.catererIds);
    }
    
    // Users can only interact with their own notifications.
    match /notifications/{notificationId} {
        allow read, update, create: if isOwner(resource.data.userId);
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isCaterer() {
      return exists(/databases/$(database)/documents/caterers/$(request.auth.uid));
    }

    function isDelivery() {
      return exists(/databases/$(database)/documents/deliveryPeople/$(request.auth.uid));
    }

    function isClient() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    match /admins/{adminId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == adminId;
      allow create: if request.auth != null;
    }

    match /users/{userId} {
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }

    match /caterers/{catererId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == catererId || isAdmin());
    }

    match /deliveryPeople/{deliveryId} {
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid == deliveryId || isAdmin());
      allow read: if request.auth != null && (request.auth.uid == deliveryId || isAdmin() || isCaterer());
    }

    // Meals: Any authenticated user (client, caterer, admin, etc.) can read meals.
    match /meals/{mealId} {
      
  allow read: if request.auth != null; // ignore isClient for testing
      allow create, update, delete: if request.auth != null && isCaterer() && request.auth.uid == request.resource.data.createdBy;
    }

    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.clientId == request.auth.uid;
      allow read: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid in resource.data.catererIds || request.auth.uid == resource.data.deliveryPersonId || isAdmin());
      allow update: if request.auth != null && (request.auth.uid in resource.data.catererIds || request.auth.uid == resource.data.deliveryPersonId || isAdmin());
    }
    
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if false; 
    }
  }
}
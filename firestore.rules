
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    match /caterers/{catererId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }
    match /admins/{adminId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin';
    }
    match /meals/{mealId} {
      allow read: if request.auth != null;
      // Allow write only for the caterer who created it, or an admin
      allow write: if request.auth != null && 
                   (resource.data.createdBy == request.auth.uid || 
                    get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin');

      // Allow authenticated users to read ratings for a meal.
      match /userRatings/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
    }
    match /orders/{orderId} {
      allow create: if request.auth != null; // Any authenticated user can create an order
      allow read: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid in resource.data.catererIds || get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin');
      allow update: if request.auth != null && (request.auth.uid in resource.data.catererIds || get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin');
    }
    match /notifications/{notificationId} {
        allow create: if request.auth != null; // Can be created by server-side logic (e.g. order service)
        allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
    }
  }
}

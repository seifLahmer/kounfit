
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user has a specific role
    function hasRole(role) {
      return exists(/databases/$(database)/documents/$(role)/$(request.auth.uid));
    }
    
    // Helper function to check if the user is the owner of a resource
    function isOwner(resource) {
      return request.auth.uid == resource.data.uid || request.auth.uid == resource.data.createdBy;
    }

    // Users can read and write their own profile
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    // Admin and Traiteur roles can be checked for existence by any authenticated user for role verification
    match /admin/{uid} {
      allow get: if request.auth.uid != null;
      allow read, write: if hasRole('admin');
    }

    match /traiteur/{uid} {
       allow get: if request.auth.uid != null;
       allow read, list, write: if hasRole('admin');
       allow update, delete: if request.auth.uid == uid;
    }
    
    // Meals can be read by any authenticated user.
    // Only caterers can create meals.
    // Only the caterer who created the meal or an admin can update/delete it.
    match /meals/{mealId} {
      allow read: if request.auth.uid != null;
      allow create: if hasRole('caterer');
      allow update, delete: if isOwner(resource) || hasRole('admin');
    }

    // Orders can be read by the client who placed it, the caterer involved, or an admin.
    // Only authenticated clients can create orders.
    // Status can be updated by the caterer or an admin.
    match /orders/{orderId} {
      allow read: if request.auth.uid == resource.data.clientId || hasRole('admin') || hasRole('caterer');
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow update: if hasRole('caterer') || hasRole('admin');
    }
    
    // Notifications can be read, created, and updated by the user they belong to.
    match /notifications/{notificationId} {
      allow read, write: if request.auth.uid == resource.data.userId;
      allow create: if request.auth.uid != null;
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId));
    }

    // Admins can read/write anything (with some restrictions for creation)
    match /admins/{userId} {
      allow read, write: if request.auth.uid == userId;
      allow create: if isAdmin(request.auth.uid);
    }

    match /caterers/{userId} {
      allow read: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow write: if isAdmin(request.auth.uid);
    }
    
    // Users can only read/write their own profile
    match /users/{userId} {
      allow read: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
      allow delete: if request.auth.uid == userId;
    }

    // Meals can be read by anyone, but only created/updated/deleted by their caterer owner or an admin
    match /meals/{mealId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth.uid == resource.data.createdBy || isAdmin(request.auth.uid);
    }
    
    // Orders can be created by any authenticated user.
    // They can be read by the client who made them, the caterer who owns them, or an admin.
    // They can only be updated (e.g., status change) by a caterer or admin.
    match /orders/{orderId} {
      allow read: if request.auth.uid == resource.data.clientId 
                  || request.auth.uid in resource.data.catererIds 
                  || isAdmin(request.auth.uid);
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow update: if request.auth.uid in resource.data.catererIds || isAdmin(request.auth.uid);
    }

    // Notifications can only be read and updated by the user they are for.
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.userId;
      // Create is handled by backend functions/services, not directly by clients.
      allow create: if request.auth != null; 
    }
  }
}

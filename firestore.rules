rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Admins: Seuls les autres administrateurs peuvent lire (géré via les fonctions cloud en pratique)
    match /admins/{adminId} {
      allow read, write: if false; // Normalement géré par le backend ou les fonctions cloud
    }

    // Users: Un utilisateur peut créer, lire et modifier son propre profil.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Caterers: Tout utilisateur authentifié peut créer un profil (inscription).
    // Seul le traiteur lui-même ou un admin peut lire ou modifier son profil.
    match /caterers/{catererId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && (request.auth.uid == catererId || (get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin'));
    }

    // DeliveryPeople: Même logique que les traiteurs.
    match /deliveryPeople/{deliveryId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && (request.auth.uid == deliveryId || (get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin'));
    }

    // Meals: N'importe quel utilisateur authentifié peut lire les repas.
    // Seul le traiteur qui l'a créé peut le modifier/supprimer.
    match /meals/{mealId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.createdBy;
    }

    // Orders: Le client peut créer sa commande. Seules les personnes concernées peuvent la voir ou la modifier.
    match /orders/{orderId} {
      allow create: if request.auth != null && request.resource.data.clientId == request.auth.uid;
      allow read: if request.auth != null && (request.auth.uid == resource.data.clientId || request.auth.uid in resource.data.catererIds || request.auth.uid == resource.data.deliveryPersonId || (get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin'));
      allow update: if request.auth != null && (request.auth.uid in resource.data.catererIds || request.auth.uid == resource.data.deliveryPersonId || (get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'admin'));
    }
    
    // Notifications: L'utilisateur concerné peut lire/mettre à jour ses notifications. La création est gérée côté serveur.
    match /notifications/{notificationId} {
      allow read, update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if false; 
    }
  }
}

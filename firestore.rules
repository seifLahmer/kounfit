rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId));
    }

    // Admins: Can read/write their own documents
    match /admins/{userId} {
      allow get: if request.auth.uid == userId;
      allow write: if request.auth.uid == userId;
    }
    
    // Users: Can only read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // Caterers: Admins can manage them, Caterers can read their own profile
    match /caterers/{userId} {
      allow get: if request.auth.uid == userId || isAdmin(request.auth.uid);
      allow list, write: if isAdmin(request.auth.uid);
    }
    
    // Meals: Caterers can create/manage their own meals, anyone can read them
    match /meals/{mealId} {
      allow read: if true;
      allow create: if request.auth.uid == request.resource.data.createdBy;
      allow update, delete: if request.auth.uid == resource.data.createdBy || isAdmin(request.auth.uid);
      allow list: if isAdmin(request.auth.uid);
    }
    
    // Orders:
    // - Clients can create orders for themselves.
    // - Clients can read their own orders.
    // - Caterers involved can read the order.
    // - Admins can read all orders.
    match /orders/{orderId} {
      allow create: if request.auth.uid == request.resource.data.clientId;
      allow read: if request.auth.uid == resource.data.clientId 
                  || request.auth.uid in resource.data.catererIds 
                  || isAdmin(request.auth.uid);
      allow update: if request.auth.uid in resource.data.catererIds || isAdmin(request.auth.uid);
      allow list: if isAdmin(request.auth.uid);
    }
    
    // Notifications:
    // - Users can only read their own notifications.
    // - System (via backend functions/services) can create them. For now, allow logged-in users to create for themselves for simplicity.
    match /notifications/{notificationId} {
      allow read, list: if request.auth.uid == resource.data.userId;
      allow create: if request.auth != null; 
    }
  }
}
